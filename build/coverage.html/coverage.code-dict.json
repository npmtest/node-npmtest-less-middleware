{"/home/travis/build/npmtest/node-npmtest-less-middleware/test.js":"/* istanbul instrument in package npmtest_less_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-less-middleware/lib.npmtest_less_middleware.js":"/* istanbul instrument in package npmtest_less_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_less_middleware = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_less_middleware = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-less-middleware/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-less-middleware && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_less_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_less_middleware\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_less_middleware.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_less_middleware.rollup.js'] =\n            local.assetsDict['/assets.npmtest_less_middleware.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_less_middleware.__dirname + '/lib.npmtest_less_middleware.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-less-middleware/node_modules/less-middleware/lib/middleware.js":"\"use strict\";\n\n/*!\n * Less - middleware (adapted from the stylus middleware)\n *\n * Copyright(c) 2014 Randy Merrill <Zoramite+github@gmail.com>\n * MIT Licensed\n */\n\nvar extend = require('node.extend');\nvar fs = require('fs');\nvar less = require('less');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar url = require('url');\nvar utilities = require('./utilities');\n\n// Import mapping with mtimes\nvar lessFiles = {};\nvar cacheFileInitialized = false;\n// Allow tests to force flushing of cacheFile\nvar _saveCacheToFile = function() {};\n\n// Check imports for changes.\nvar checkImports = function(path, next) {\n  var nodes = lessFiles[path].imports;\n\n  if (!nodes || !nodes.length) {\n    return next();\n  }\n\n  var pending = nodes.length;\n  var changed = [];\n\n  nodes.forEach(function(imported){\n    fs.stat(imported.path, function(err, stat) {\n      // error or newer mtime\n      if (err || !imported.mtime || stat.mtime > imported.mtime) {\n        changed.push(imported.path);\n      }\n\n      --pending || next(changed);\n    });\n  });\n};\n\nvar initCacheFile = function(cacheFile, log) {\n  cacheFileInitialized = true;\n  var cacheFileSaved = false;\n  _saveCacheToFile = function() {\n    if (cacheFileSaved) { // We expect to only save to the cache file once, just before exiting\n      log('cache file already appears to be saved, not saving again to', cacheFile);\n      return;\n    } else {\n      cacheFileSaved = true;\n      try {\n        fs.writeFileSync(cacheFile, JSON.stringify(lessFiles), 'utf8');\n        log('successfully cached imports to file', cacheFile);\n      } catch (err) {\n        log('error caching imports to file ' + cacheFile, err);\n      }\n    }\n  };\n  process.on('exit', _saveCacheToFile);\n  process.once('SIGUSR2', function() { // Handle nodemon restarts\n    _saveCacheToFile();\n    process.kill(process.pid, 'SIGUSR2');\n  });\n  process.once('SIGINT', function() {\n    _saveCacheToFile();\n    process.kill(process.pid, 'SIGINT'); // Let other SIGINT handlers run, if there are any\n  });\n\n  fs.readFile(cacheFile, 'utf8', function(err, data) {\n    if (!err) {\n      try {\n        lessFiles = extend(JSON.parse(data), lessFiles);\n      } catch (err) {\n        log('error parsing cached imports in file ' + cacheFile, err);\n      }\n    } else {\n      log('error loading cached imports file ' + cacheFile, err);\n    }\n  });\n}\n\n/**\n * Return Connect middleware with the given `options`.\n */\nmodule.exports = less.middleware = function(source, options){\n  // Source dir is required.\n  if (!source) {\n    throw new Error('less.middleware() requires `source` directory');\n  }\n\n  // Override the defaults for the middleware.\n  options = extend(true, {\n    cacheFile: null,\n    debug: false,\n    dest: source,\n    force: false,\n    once: false,\n    pathRoot: null,\n    postprocess: {\n      css: function(css, req) { return css; },\n      sourcemap: function(sourcemap, req) { return sourcemap; }\n    },\n    preprocess: {\n      less: function(src, req) { return src; },\n      path: function(pathname, req) { return pathname; },\n      importPaths: function(paths, req) { return paths; }\n    },\n    render: {\n      compress: 'auto',\n      yuicompress: false,\n      paths: []\n    },\n    storeCss: function(pathname, css, req, next) {\n      mkdirp(path.dirname(pathname), 511 /* 0777 */, function(err){\n        if (err) return next(err);\n\n        fs.writeFile(pathname, css, 'utf8', next);\n      });\n    },\n    storeSourcemap: function(pathname, sourcemap, req) {\n      mkdirp(path.dirname(pathname), 511 /* 0777 */, function(err){\n        if (err) {\n          utilities.lessError(err);\n          return;\n        }\n\n        fs.writeFile(pathname, sourcemap, 'utf8');\n      });\n    }\n  }, options || {});\n\n  // The log function is determined by the debug option.\n  var log = (options.debug ? utilities.logDebug : utilities.log);\n\n  if (options.cacheFile && !cacheFileInitialized) {\n    initCacheFile(options.cacheFile, log);\n  }\n\n  // Expose for testing.\n  less.middleware._saveCacheToFile = _saveCacheToFile;\n\n  // Actual middleware.\n  return function(req, res, next) {\n    if ('GET' != req.method.toUpperCase() && 'HEAD' != req.method.toUpperCase()) { return next(); }\n\n    var pathname = url.parse(req.url).pathname;\n\n    // Only handle the matching files in this middleware.\n    if (utilities.isValidPath(pathname)) {\n      var isSourceMap = utilities.isSourceMap(pathname);\n\n      // Translate source maps to a normal .css request which will update the associated source-map.\n      if( isSourceMap ){\n        pathname = pathname.replace( /\\.map$/, '' );\n      }\n      var lessPath = path.join(source, utilities.maybeCompressedSource(pathname));\n      var cssPath = path.join(options.dest, pathname);\n\n      if (options.pathRoot) {\n        pathname = pathname.replace(options.dest, '');\n        cssPath = path.join(options.pathRoot, options.dest, pathname);\n        lessPath = path.join(options.pathRoot, source, utilities.maybeCompressedSource(pathname));\n      }\n\n      var sourcemapPath = cssPath + '.map';\n\n      // Allow for preprocessing the source filename.\n      lessPath = options.preprocess.path(lessPath, req);\n\n      log('pathname', pathname);\n      log('source', lessPath);\n      log('destination', cssPath);\n\n      // Ignore ENOENT to fall through as 404.\n      var error = function(err) {\n        return next('ENOENT' == err.code ? null : err);\n      };\n\n      var compile = function() {\n        fs.readFile(lessPath, 'utf8', function(err, lessSrc){\n          if (err) {\n            return error(err);\n          }\n\n          delete lessFiles[lessPath];\n\n          try {\n            var renderOptions = extend(true, {}, options.render, {\n              filename: lessPath,\n              paths: options.preprocess.importPaths(options.render.paths, req)\n            });\n            lessSrc = options.preprocess.less(lessSrc, req);\n\n            less.render(lessSrc, renderOptions, function(err, output){\n              if (err) {\n                utilities.lessError(err);\n                return next(err);\n              }\n\n              // Determine the imports used and check modified times.\n              var imports = [];\n              output.imports.forEach(function(imported) {\n                var currentImport = {\n                    path: imported,\n                    mtime: null\n                };\n\n                imports.push(currentImport);\n\n                // Update the mtime of the import async.\n                fs.stat(imported, function(err, lessStats){\n                  if (err) {\n                    return error(err);\n                  }\n\n                  currentImport.mtime = lessStats.mtime;\n                });\n              });\n\n              // Store the less paths for simple cache invalidation.\n              lessFiles[lessPath] = {\n                mtime: Date.now(),\n                imports: imports\n              };\n\n              if(output.map) {\n                // Postprocessing on the sourcemap.\n                var map = options.postprocess.sourcemap(output.map, req);\n\n                // Custom sourcemap storage.\n                options.storeSourcemap(sourcemapPath, map, req);\n              }\n\n              // Postprocessing on the css.\n              var css = options.postprocess.css(output.css, req);\n\n              // Custom css storage.\n              options.storeCss(cssPath, css, req, next);\n            });\n          } catch (err) {\n            utilities.lessError(err);\n            return next(err);\n          }\n        });\n      };\n\n      // Force recompile of all files.\n      if (options.force) {\n        return compile();\n      }\n\n      // Only compile once, disregarding the file changes.\n      if (options.once && lessFiles[lessPath]) {\n        return next();\n      }\n\n      // Compile on (uncached) server restart and new files.\n      if (!lessFiles[lessPath]) {\n        return compile();\n      }\n\n      // Compare mtimes to determine if changed.\n      fs.stat(lessPath, function(err, lessStats){\n        if (err) {\n          return error(err);\n        }\n\n        fs.stat(cssPath, function(err, cssStats){\n          // CSS has not been compiled, compile it!\n          if (err) {\n            if ('ENOENT' == err.code) {\n              log('not found', cssPath);\n\n              // No CSS file found in dest\n              return compile();\n            }\n\n            return next(err);\n          }\n\n          if (lessStats.mtime > cssStats.mtime) {\n            // Source has changed, compile it\n            log('modified', cssPath);\n\n            return compile();\n          } else if (lessStats.mtime > lessFiles[lessPath].mtime) {\n            // This can happen if lessFiles[lessPath] was copied from\n            // cacheFile above, but the cache file was out of date (which\n            // can happen e.g. if node is killed and we were unable to write out\n            // lessFiles on exit). Since imports might have changed, we need to\n            // recompile.\n            log('cache file out of date for', lessPath);\n\n            return compile();\n          } else {\n            // Check if any of the less imports were changed\n            checkImports(lessPath, function(changed){\n              if(typeof changed != \"undefined\" && changed.length) {\n                log('modified import', changed);\n\n                return compile();\n              }\n\n              return next();\n            });\n          }\n        });\n      });\n    } else {\n      return next();\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-less-middleware/node_modules/less-middleware/lib/utilities.js":"\"use strict\";\n\n/*!\n * Utiltiy methods for the less middleware.\n *\n * Copyright(c) 2014 Randy Merrill <Zoramite+github@gmail.com>\n * MIT Licensed\n */\n\nvar regex = {\n  compress: /(\\.|-)min\\.css$/,\n  handle: /\\.css(\\.map)?$/,\n  sourceMap: /\\.css\\.map$/\n};\n\nmodule.exports = {\n  isCompressedPath: function(pathname) {\n    return regex.compress.test(pathname);\n  },\n  isSourceMap: function( pathname ){\n    return regex.sourceMap.test(pathname);\n  },\n  isValidPath: function(pathname) {\n    return regex.handle.test(pathname);\n  },\n  lessError: function(err) {\n    // An error while less is processing the file.\n    module.exports.log('LESS ' + err.type + ' error', err.message, 'error');\n    module.exports.log('LESS File', err.filename + ' ' + err.line + ':' + err.column, 'error');\n  },\n  log: function(key, value, type) {\n    // Only log for errors.\n    if(type !== 'error') {\n      return;\n    }\n\n    console[type](\"  \\u001b[90m%s :\\u001b[0m \\u001b[36m%s\\u001b[0m\", key, value);\n  },\n  logDebug: function(key, value, type) {\n    switch(type) {\n      case 'log':\n      case 'info':\n      case 'error':\n      case 'warn':\n        break;\n      default:\n        type = 'log';\n    }\n\n    console[type](\"  \\u001b[90m%s :\\u001b[0m \\u001b[36m%s\\u001b[0m\", key, value);\n  },\n  maybeCompressedSource: function(pathname) {\n    return (regex.compress.test(pathname)\n        ? pathname.replace(regex.compress, '.less')\n        : pathname.replace('.css', '.less')\n      );\n  }\n};\n"}